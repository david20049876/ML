import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_recall_curve, roc_curve, auc
from sklearn.preprocessing import StandardScaler, LabelEncoder

# Load dataset
try:
    df = pd.read_csv('/content/Social_Network_Ads.csv')
except FileNotFoundError:
    print("File not found. Please check the path.")
    exit()

# Prepare data
X = df.iloc[:, 1].values.reshape(-1, 1)
y = df.iloc[:, -1].values

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Preprocessing
le = LabelEncoder()
X_train[:, 0] = le.fit_transform(X_train[:, 0])
X_test[:, 0] = le.transform(X_test[:, 0])

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Logistic Regression Model
classifier = LogisticRegression(random_state=0)
classifier.fit(X_train, y_train)

# Prediction
print(classifier.predict(sc.transform([[87000]])))
y_pred = classifier.predict(X_test)

# Concatenate predictions and actual values
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), axis=1))

# Confusion Matrix and Accuracy
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
print(f"Confusion Matrix:\n{cm}")
print(f"Accuracy Score: {accuracy}")
print(classification_report(y_test, y_pred))

# Precision-Recall Curve
precision, recall, _ = precision_recall_curve(y_test, classifier.predict_proba(X_test)[:, 1])
plt.figure()
plt.plot(recall, precision, marker='.', label='Logistic Regression')
plt.title('Precision-Recall Curve')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.legend()
plt.show()

# ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, classifier.predict_proba(X_test)[:, 1], pos_label=1)
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend()
plt.show()

# Diabetes Dataset Example
try:
    DF = pd.read_csv('/content/diabetes.csv')
except FileNotFoundError:
    print("Diabetes file not found. Please check the path.")
    exit()

print("Null values in each column:\n", DF.isnull().sum())

# Prepare data
X = DF.drop('Outcome', axis=1)
y = DF['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Logistic Regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Confusion Matrix for Diabetes Dataset
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# ROC Curve for Diabetes Dataset
fpr, tpr, thresholds = roc_curve(y_test, model.predict_proba(X_test)[:, 1])
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend()
plt.show()

# Multiclass Softmax Regression Example
softmax_reg = LogisticRegression(multi_class='multinomial', solver='lbfgs', C=10)
softmax_reg.fit(X_train, y_train)
print(softmax_reg.predict(sc.transform([[30, 87000, 1]])))
print(softmax_reg.predict_proba(sc.transform([[30, 87000, 0]])))

# Decision Region Plot
from mlxtend.plotting import plot_decision_regions
X, y = make_classification(n_samples=200, n_features=2, n_informative=2, n_redundant=0, n_classes=2, random_state=1)
clf = LogisticRegression()
clf.fit(X, y)
plot_decision_regions(X=X, y=y, clf=clf, legend=2)
plt.title('Logistic Regression Decision Regions')
plt.show()
